volumes:
  npm_storage:
  npm_letsencrypt:
  n8n_storage:
  cloudflared_storage:
  postgres_storage:
  redis_storage:
  ollama_storage:
  qdrant_storage:

networks:
  n8n-network:
    driver: bridge

services:
  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    hostname: nginx-proxy-manager
    container_name: nginx-proxy-manager
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "81:81"
    volumes:
      - npm_storage:/data
      - npm_letsencrypt:/etc/letsencrypt
    environment:
      - DISABLE_IPV6=true
      - TZ=${TZ}
    networks:
      - n8n-network

  cloudflared:
    image: cloudflare/cloudflared:latest
    hostname: cloudflared
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARED_TUNNEL_TOKEN}
    volumes:
      - cloudflared_storage:/etc/cloudflared
    networks:
      - n8n-network

  postgres:
    image: postgres:16
    hostname: postgres
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_NON_ROOT_USER=${POSTGRES_NON_ROOT_USER}
      - POSTGRES_NON_ROOT_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    networks:
      - n8n-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:latest
    hostname: redis
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis_storage:/data
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  qdrant:
    image: qdrant/qdrant:latest
    hostname: qdrant
    container_name: qdrant
    restart: unless-stopped
    volumes:
      - qdrant_storage:/qdrant/storage
    networks:
      - n8n-network

  ollama:
    # Use `ollama/ollama:latest` for CPU, or `ollama/ollama:rocm` for AMD GPUs.
    # For NVIDIA, use the `deploy` section below.
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    volumes:
      - ollama_storage:/root/.ollama
    networks:
      - n8n-network
    # For NVIDIA GPUs, uncomment the following:
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    # For AMD GPUs on Linux, uncomment the following:
    # devices:
    #   - "/dev/kfd"
    #   - "/dev/dri"

  # This service will pull the llama3 model when you first start the stack.
  # You can change 'llama3' to another model if you prefer.
  init-ollama:
    image: ollama/ollama:latest
    container_name: init-ollama
    networks:
      - n8n-network
    volumes:
      - ollama_storage:/root/.ollama
    entrypoint: /bin/sh
    command:
      - "-c"
      - "sleep 5 && ollama pull llama3.2"
    depends_on:
      - ollama

  n8n-import:
    image: docker.n8n.io/n8nio/n8n:latest
    hostname: n8n-import
    container_name: n8n-import
    restart: "no"
    volumes:
      - ./n8n/import:/import
      - n8n_storage:/home/node/.n8n
      # - ./import-loop.sh:/scripts/import-loop.sh:ro
    networks:
      - n8n-network
    entrypoint: /bin/sh
    command:
      - "-c"
      - |
        if [ "${RUN_IMPORT_ON_STARTUP:-false}" = "true" ]; then
          echo "RUN_IMPORT_ON_STARTUP is true. Running import..."
          n8n import:credentials --separate --input=/import/credentials && n8n import:workflow --separate --input=/import/workflows
        else
          echo "RUN_IMPORT_ON_STARTUP is not true. Skipping import."
        fi
    # command: ["/scripts/import-loop.sh"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_PORT=5432
      - QUEUE_BULL_REDIS_HOST=redis
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
      - RUN_IMPORT_ON_STARTUP=${RUN_IMPORT_ON_STARTUP:-false}

  n8n-export:
    image: docker.n8n.io/n8nio/n8n:latest
    hostname: n8n-export
    container_name: n8n-export
    restart: "no"
    networks:
      - n8n-network
    volumes:
      - ./n8n/backup:/backup
      - n8n_storage:/home/node/.n8n
    entrypoint: /bin/sh
    command:
      - "-c"
      - |
        if [ "${RUN_BACKUP_ON_STARTUP:-false}" = "true" ]; then
          echo "RUN_BACKUP_ON_STARTUP is true. Running export..."
          n8n export:credentials --backup --output=/backup/credentials && n8n export:workflow --backup --output=/backup/workflows || true
        else
          echo "RUN_BACKUP_ON_STARTUP is not true. Skipping export."
        fi
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_PORT=5432
      - QUEUE_BULL_REDIS_HOST=redis
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
      - RUN_BACKUP_ON_STARTUP=${RUN_BACKUP_ON_STARTUP:-false}

  n8n:
    image: docker.n8n.io/n8nio/n8n:latest
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    environment:
      - WEBHOOK_URL=https://${URL}/
      - N8N_PROTOCOL=https
      - N8N_HOST=${URL}
      - GENERIC_TIMEZONE=${TZ}
      - N8N_TRUST_PROXY=true
      - N8N_PROXY_HOPS=2
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_HEALTH_CHECK_ACTIVE=true
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_PORT=5432
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - OLLAMA_HOST=ollama:11434
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./n8n/import:/import
      - ./n8n/import/credentials:/import/credentials
      - ./n8n/import/workflows:/import/workflows
    networks:
      - n8n-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
      n8n-export:
        condition: service_completed_successfully

  n8n-worker:
    image: docker.n8n.io/n8nio/n8n:latest
    hostname: n8n-worker
    container_name: n8n-worker
    command: worker
    restart: unless-stopped
    environment:
      - GENERIC_TIMEZONE=${TZ}
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_HEALTH_CHECK_ACTIVE=true
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_PORT=5432
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - OLLAMA_HOST=ollama:11434
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
    volumes:
      - n8n_storage:/home/node/.n8n
    networks:
      - n8n-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
      n8n-export:
        condition: service_completed_successfully
